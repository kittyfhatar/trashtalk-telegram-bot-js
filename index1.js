// BOT VERSION TRASHTALK V 1BETA
const TelegramBot = require('node-telegram-bot-api')
const debug = require('./helpers.js')
const token = '5731636749:AAF7RSgPCzhy0fZVLlcqHeKP5E7xF2uljNk'
const bot = new TelegramBot(token, {polling: true})
const fs = require('fs'); // File System


bot.setMyCommands([
    {command: '/start', description: '–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–∞ –ø—Ä–æ –±–æ—Ç–∞'},
    {command: '/donate', description: 'Donate to coder'}
])

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, "üîî <b>–í—ã–∑—ã–≤–∞—é –º–µ–Ω—é...</b>", {parse_mode: "HTML", reply_markup: {
        keyboard: [
            ["üá∑üá∫", "üá∫üá∏"]
        ]
    }})
    // await bot.sendMessage(chatId, "**",)
    await bot.sendMessage(chatId, "*üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —Ç—ã –Ω–µ –∫–∞–∑–∞–ª—Å—è –Ω–∏—â–∏–º –≤ –≥–ª–∞–∑–∞—Ö —Å–≤–æ–∏—Ö –≤—Ä–∞–≥–æ–≤ \n\n‚úâÔ∏è –ö–∏–Ω—É—Ç—å —Å–≤–æ–π —Ç—Ä–µ—à—Ç–æ–ª–∫ –ª–∏—Å—Ç –º–æ–∂–µ—à—å –º–Ω–µ –≤ –ª—Å @doxmedoxmedoxme*", {parse_mode: "MarkdownV2",reply_markup: {
        inline_keyboard: [
            [
            {
                text: "üë∑‚Äç‚ôÇÔ∏è –ö–æ–¥–µ—Ä",
                url: 'tg://user?id=5305307232'
            }
        ]
        ]
    }})
})

bot.onText(/^üá∑üá∫$/, (message) => {
 
    const text = fs.readFileSync('trash.txt', 'utf8');
    const strings = text.split('\n');
    const randomString = strings[Math.floor(Math.random() * strings.length)];
    bot.sendMessage(message.chat.id, "`"+randomString+"`" , {parse_mode: "MarkdownV2" ,reply_markup: {
        inline_keyboard: [
            [
            {
                text: "üë∑‚Äç‚ôÇÔ∏è –ö–æ–¥–µ—Ä",
                url: 'tg://user?id=5305307232'
            }
        ]
        ]}});
  });

bot.onText(/^üá∫üá∏$/, (message) => {
 
    const text = fs.readFileSync('trasheng.txt', 'utf8');
    const strings = text.split('\n');
    const randomString1 = strings[Math.floor(Math.random() * strings.length)];
  
    bot.sendMessage(message.chat.id, "`"+randomString1+"`", {parse_mode: "MarkdownV2",reply_markup: {
        inline_keyboard: [
            [
            {
                text: "üë∑‚Äç‚ôÇÔ∏è –ö–æ–¥–µ—Ä",
                url: 'tg://user?id=5305307232'
            }
        ]
        ]}});
});


bot.onText(/\/donate/, async (msg, match) => {
    const text = msg.text;
    const username = msg.from.username;
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId,"\n`USDT`", {parse_mode: "MarkdownV2"}) 
    
});

bot.onText(/\/test/, (msg) => {
    const user_id = msg.from.id;
    const username = msg.from.username;
    console.log(`–¢–≤–æ–π TG ID: ${user_id}`);
    console.log(`–¢–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º: @${username}`);
    try {
        bot.sendMessage(user_id, `–¢–≤–æ–π ID: <code>${user_id}</code>\n–¢–≤–æ–π username: ${username}`, {parse_mode: "HTML", reply_markup: {
            inline_keyboard: [
                [
                {
                    text: "üë∑‚Äç‚ôÇÔ∏è –¢—ã",
                    url: `tg://user?id=${user_id}`
                }
            ]
            ]
        }
    });
    } catch(err){
        console.error(err);
    }
})




bot.on("polling_error", console.log);
